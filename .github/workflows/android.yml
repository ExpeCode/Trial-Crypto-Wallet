name: Android CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 11

      - name: Install dependencies
        run: sudo apt-get install -y wget tar unzip

      - name: Cache Android SDK
        uses: actions/cache@v3
        with:
          path: $HOME/Android/Sdk
          key: ${{ runner.os }}-android-sdk-${{ hashFiles('**/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-android-sdk-

      - name: Download Android SDK
        if: steps.cache-android-sdk.outputs.cache-hit != 'true'
        run: wget https://dl.google.com/android/repository/commandlinetools-linux-6609375_latest.zip -O android-sdk.zip

      - name: Create Android SDK directory
        if: steps.cache-android-sdk.outputs.cache-hit != 'true'
        run: mkdir -p $HOME/Android/Sdk/cmdline-tools

      - name: Unzip Android SDK
        if: steps.cache-android-sdk.outputs.cache-hit != 'true'
        run: unzip android-sdk.zip -d $HOME/Android/Sdk/cmdline-tools

      - name: List contents of SDK directory
        if: steps.cache-android-sdk.outputs.cache-hit != 'true'
        run: ls -R $HOME/Android/Sdk/cmdline-tools

      - name: Set up Android SDK
        if: steps.cache-android-sdk.outputs.cache-hit != 'true'
        run: |
          mkdir -p $HOME/Android/Sdk/cmdline-tools/latest
          mv $HOME/Android/Sdk/cmdline-tools/cmdline-tools/* $HOME/Android/Sdk/cmdline-tools/latest
          echo "sdk.dir=$HOME/Android/Sdk" >> local.properties

      - name: Accept Licenses
        run: yes | $HOME/Android/Sdk/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Install Android SDK components
        run: |
          $HOME/Android/Sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-30"

      - name: Gradle Build
        run: ./gradlew build

      - name: Run Tests
        run: ./gradlew test

      - name: Build Release APK
        run: ./gradlew assembleRelease

      - name: Decode signing key
        run: echo ${{ secrets.SIGNING_KEY }} | base64 --decode > release-key.jks

      - name: Set up signing configuration
        run: |
          echo "signingConfigs {
              release {
                  keyAlias '${{ secrets.KEY_ALIAS }}'
                  keyPassword '${{ secrets.KEY_PASSWORD }}'
                  storeFile file('release-key.jks')
                  storePassword '${{ secrets.STORE_PASSWORD }}'
              }
          }
          buildTypes {
              release {
                  signingConfig signingConfigs.release
              }
          }" > ./app/signing.gradle
        shell: bash

      - name: Build Release APK with Signing
        run: ./gradlew assembleRelease -Pandroid.injected.signing.store.file=release-key.jks -Pandroid.injected.signing.store.password=${{ secrets.STORE_PASSWORD }} -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}

      - name: Upload Release APK
        uses: actions/upload-artifact@v2
        with:
          name: app-release.apk
          path: app/build/outputs/apk/release/app-release.apk

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive
