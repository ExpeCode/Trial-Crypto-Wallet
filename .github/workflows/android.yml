name: Android CI/CD

on:
  push:
    branches:
      - abc
  pull_request:
    branches:
      - abc

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest

    env:
      KEYSTORE_PATH: keystore.jks
      KEYSTORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      APK_UNSIGNED_PATH: app/build/outputs/apk/release/app-release-unsigned.apk
      APK_PATH: app/build/outputs/apk/release/app-release.apk

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 30
          build-tools: 30.0.3

      - name: Set JAVA_HOME
        run: echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))" >> $GITHUB_ENV

      - name: Verify Java Home
        run: echo $JAVA_HOME

      - name: Update gradle.properties
        run: |
          sed -i '/org.gradle.java.home/d' $GITHUB_WORKSPACE/gradle.properties
          echo "org.gradle.java.home=${{ env.JAVA_HOME }}" >> $GITHUB_WORKSPACE/gradle.properties

      - name: Download dependencies
        run: ./gradlew build --stacktrace

      - name: Run tests
        run: ./gradlew test --stacktrace

      - name: Build Release APK
        run: ./gradlew assembleRelease --stacktrace

      - name: Decrypt Keystore
        run: echo "${{ secrets.SIGNING_KEY }}" | base64 --decode > $KEYSTORE_PATH

      - name: Sign APK
        run: |
          jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore $KEYSTORE_PATH \
          -storepass $KEYSTORE_PASSWORD -keypass $KEY_PASSWORD $APK_UNSIGNED_PATH $KEY_ALIAS

      - name: Verify signed APK
        run: jarsigner -verify $APK_UNSIGNED_PATH

      - name: Install zipalign
        run: sdkmanager "build-tools;30.0.3"

      - name: List build-tools directory
        run: ls -l $ANDROID_HOME/build-tools/30.0.3

      - name: Align the APK file (zipalign)
        run: |
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME"
          $ANDROID_HOME/build-tools/30.0.3/zipalign -v -p 4 $APK_UNSIGNED_PATH $APK_PATH

      - name: Display project file tree
        run: |
          sudo apt-get install -y tree
          tree -L 2000

      - name: Check if APK exists
        run: ls -R $APK_PATH

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-apk
          path: app/build/outputs/apk/release/app-release.apk

  create_release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/abc'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download APK artifact
        uses: actions/download-artifact@v3
        with:
          name: release-apk

      - name: List downloaded artifacts
        run: ls -R

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          body: "Release of version ${{ github.ref_name }}"
          draft: false
          prerelease: false

      - name: Upload APK to GitHub Release
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive
